/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.github.heldev.verso.app;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-18")
public class BookDto implements org.apache.thrift.TBase<BookDto, BookDto._Fields>, java.io.Serializable, Cloneable, Comparable<BookDto> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BookDto");

  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField AUTHORS_FIELD_DESC = new org.apache.thrift.protocol.TField("authors", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PUBLISHERS_FIELD_DESC = new org.apache.thrift.protocol.TField("publishers", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField REVIEWS_FIELD_DESC = new org.apache.thrift.protocol.TField("reviews", org.apache.thrift.protocol.TType.MAP, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new BookDtoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new BookDtoTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String title; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> authors; // required
  public @org.apache.thrift.annotation.Nullable Type type; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<Publisher> publishers; // required
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.lang.String> reviews; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TITLE((short)1, "title"),
    AUTHORS((short)2, "authors"),
    TYPE((short)3, "type"),
    PUBLISHERS((short)4, "publishers"),
    REVIEWS((short)5, "reviews");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TITLE
          return TITLE;
        case 2: // AUTHORS
          return AUTHORS;
        case 3: // TYPE
          return TYPE;
        case 4: // PUBLISHERS
          return PUBLISHERS;
        case 5: // REVIEWS
          return REVIEWS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.TYPE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUTHORS, new org.apache.thrift.meta_data.FieldMetaData("authors", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.ENUM        , "Type")));
    tmpMap.put(_Fields.PUBLISHERS, new org.apache.thrift.meta_data.FieldMetaData("publishers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "Publisher"))));
    tmpMap.put(_Fields.REVIEWS, new org.apache.thrift.meta_data.FieldMetaData("reviews", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BookDto.class, metaDataMap);
  }

  public BookDto() {
    this.authors = new java.util.ArrayList<java.lang.String>();

    this.reviews = new java.util.HashMap<java.lang.Integer,java.lang.String>();

  }

  public BookDto(
    java.lang.String title,
    java.util.List<java.lang.String> authors,
    java.util.List<Publisher> publishers,
    java.util.Map<java.lang.Integer,java.lang.String> reviews)
  {
    this();
    this.title = title;
    this.authors = authors;
    this.publishers = publishers;
    this.reviews = reviews;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BookDto(BookDto other) {
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetAuthors()) {
      java.util.List<java.lang.String> __this__authors = new java.util.ArrayList<java.lang.String>(other.authors);
      this.authors = __this__authors;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetPublishers()) {
      java.util.List<Publisher> __this__publishers = new java.util.ArrayList<Publisher>(other.publishers.size());
      for (Publisher other_element : other.publishers) {
        __this__publishers.add(new Publisher(other_element));
      }
      this.publishers = __this__publishers;
    }
    if (other.isSetReviews()) {
      java.util.Map<java.lang.Integer,java.lang.String> __this__reviews = new java.util.HashMap<java.lang.Integer,java.lang.String>(other.reviews);
      this.reviews = __this__reviews;
    }
  }

  public BookDto deepCopy() {
    return new BookDto(this);
  }

  @Override
  public void clear() {
    this.title = null;
    this.authors = new java.util.ArrayList<java.lang.String>();

    this.type = null;
    this.publishers = null;
    this.reviews = new java.util.HashMap<java.lang.Integer,java.lang.String>();

  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTitle() {
    return this.title;
  }

  public BookDto setTitle(@org.apache.thrift.annotation.Nullable java.lang.String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public int getAuthorsSize() {
    return (this.authors == null) ? 0 : this.authors.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getAuthorsIterator() {
    return (this.authors == null) ? null : this.authors.iterator();
  }

  public void addToAuthors(java.lang.String elem) {
    if (this.authors == null) {
      this.authors = new java.util.ArrayList<java.lang.String>();
    }
    this.authors.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getAuthors() {
    return this.authors;
  }

  public BookDto setAuthors(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> authors) {
    this.authors = authors;
    return this;
  }

  public void unsetAuthors() {
    this.authors = null;
  }

  /** Returns true if field authors is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthors() {
    return this.authors != null;
  }

  public void setAuthorsIsSet(boolean value) {
    if (!value) {
      this.authors = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public Type getType() {
    return this.type;
  }

  public BookDto setType(@org.apache.thrift.annotation.Nullable Type type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public int getPublishersSize() {
    return (this.publishers == null) ? 0 : this.publishers.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<Publisher> getPublishersIterator() {
    return (this.publishers == null) ? null : this.publishers.iterator();
  }

  public void addToPublishers(Publisher elem) {
    if (this.publishers == null) {
      this.publishers = new java.util.ArrayList<Publisher>();
    }
    this.publishers.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<Publisher> getPublishers() {
    return this.publishers;
  }

  public BookDto setPublishers(@org.apache.thrift.annotation.Nullable java.util.List<Publisher> publishers) {
    this.publishers = publishers;
    return this;
  }

  public void unsetPublishers() {
    this.publishers = null;
  }

  /** Returns true if field publishers is set (has been assigned a value) and false otherwise */
  public boolean isSetPublishers() {
    return this.publishers != null;
  }

  public void setPublishersIsSet(boolean value) {
    if (!value) {
      this.publishers = null;
    }
  }

  public int getReviewsSize() {
    return (this.reviews == null) ? 0 : this.reviews.size();
  }

  public void putToReviews(int key, java.lang.String val) {
    if (this.reviews == null) {
      this.reviews = new java.util.HashMap<java.lang.Integer,java.lang.String>();
    }
    this.reviews.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.Integer,java.lang.String> getReviews() {
    return this.reviews;
  }

  public BookDto setReviews(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.lang.String> reviews) {
    this.reviews = reviews;
    return this;
  }

  public void unsetReviews() {
    this.reviews = null;
  }

  /** Returns true if field reviews is set (has been assigned a value) and false otherwise */
  public boolean isSetReviews() {
    return this.reviews != null;
  }

  public void setReviewsIsSet(boolean value) {
    if (!value) {
      this.reviews = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((java.lang.String)value);
      }
      break;

    case AUTHORS:
      if (value == null) {
        unsetAuthors();
      } else {
        setAuthors((java.util.List<java.lang.String>)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Type)value);
      }
      break;

    case PUBLISHERS:
      if (value == null) {
        unsetPublishers();
      } else {
        setPublishers((java.util.List<Publisher>)value);
      }
      break;

    case REVIEWS:
      if (value == null) {
        unsetReviews();
      } else {
        setReviews((java.util.Map<java.lang.Integer,java.lang.String>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TITLE:
      return getTitle();

    case AUTHORS:
      return getAuthors();

    case TYPE:
      return getType();

    case PUBLISHERS:
      return getPublishers();

    case REVIEWS:
      return getReviews();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TITLE:
      return isSetTitle();
    case AUTHORS:
      return isSetAuthors();
    case TYPE:
      return isSetType();
    case PUBLISHERS:
      return isSetPublishers();
    case REVIEWS:
      return isSetReviews();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof BookDto)
      return this.equals((BookDto)that);
    return false;
  }

  public boolean equals(BookDto that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_authors = true && this.isSetAuthors();
    boolean that_present_authors = true && that.isSetAuthors();
    if (this_present_authors || that_present_authors) {
      if (!(this_present_authors && that_present_authors))
        return false;
      if (!this.authors.equals(that.authors))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_publishers = true && this.isSetPublishers();
    boolean that_present_publishers = true && that.isSetPublishers();
    if (this_present_publishers || that_present_publishers) {
      if (!(this_present_publishers && that_present_publishers))
        return false;
      if (!this.publishers.equals(that.publishers))
        return false;
    }

    boolean this_present_reviews = true && this.isSetReviews();
    boolean that_present_reviews = true && that.isSetReviews();
    if (this_present_reviews || that_present_reviews) {
      if (!(this_present_reviews && that_present_reviews))
        return false;
      if (!this.reviews.equals(that.reviews))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTitle()) ? 131071 : 524287);
    if (isSetTitle())
      hashCode = hashCode * 8191 + title.hashCode();

    hashCode = hashCode * 8191 + ((isSetAuthors()) ? 131071 : 524287);
    if (isSetAuthors())
      hashCode = hashCode * 8191 + authors.hashCode();

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + type.getValue();

    hashCode = hashCode * 8191 + ((isSetPublishers()) ? 131071 : 524287);
    if (isSetPublishers())
      hashCode = hashCode * 8191 + publishers.hashCode();

    hashCode = hashCode * 8191 + ((isSetReviews()) ? 131071 : 524287);
    if (isSetReviews())
      hashCode = hashCode * 8191 + reviews.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(BookDto other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAuthors()).compareTo(other.isSetAuthors());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthors()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authors, other.authors);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPublishers()).compareTo(other.isSetPublishers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublishers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publishers, other.publishers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetReviews()).compareTo(other.isSetReviews());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReviews()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reviews, other.reviews);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("BookDto(");
    boolean first = true;

    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("authors:");
    if (this.authors == null) {
      sb.append("null");
    } else {
      sb.append(this.authors);
    }
    first = false;
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("publishers:");
    if (this.publishers == null) {
      sb.append("null");
    } else {
      sb.append(this.publishers);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reviews:");
    if (this.reviews == null) {
      sb.append("null");
    } else {
      sb.append(this.reviews);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (title == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'title' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BookDtoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BookDtoStandardScheme getScheme() {
      return new BookDtoStandardScheme();
    }
  }

  private static class BookDtoStandardScheme extends org.apache.thrift.scheme.StandardScheme<BookDto> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BookDto struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // AUTHORS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.authors = new java.util.ArrayList<java.lang.String>(_list0.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.authors.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setAuthorsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = io.github.heldev.verso.app.Type.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PUBLISHERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.publishers = new java.util.ArrayList<Publisher>(_list3.size);
                @org.apache.thrift.annotation.Nullable Publisher _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = new Publisher();
                  _elem4.read(iprot);
                  struct.publishers.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setPublishersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REVIEWS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map6 = iprot.readMapBegin();
                struct.reviews = new java.util.HashMap<java.lang.Integer,java.lang.String>(2*_map6.size);
                int _key7;
                @org.apache.thrift.annotation.Nullable java.lang.String _val8;
                for (int _i9 = 0; _i9 < _map6.size; ++_i9)
                {
                  _key7 = iprot.readI32();
                  _val8 = iprot.readString();
                  struct.reviews.put(_key7, _val8);
                }
                iprot.readMapEnd();
              }
              struct.setReviewsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BookDto struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(struct.title);
        oprot.writeFieldEnd();
      }
      if (struct.authors != null) {
        oprot.writeFieldBegin(AUTHORS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.authors.size()));
          for (java.lang.String _iter10 : struct.authors)
          {
            oprot.writeString(_iter10);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeI32(struct.type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.publishers != null) {
        oprot.writeFieldBegin(PUBLISHERS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.publishers.size()));
          for (Publisher _iter11 : struct.publishers)
          {
            _iter11.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.reviews != null) {
        oprot.writeFieldBegin(REVIEWS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, struct.reviews.size()));
          for (java.util.Map.Entry<java.lang.Integer, java.lang.String> _iter12 : struct.reviews.entrySet())
          {
            oprot.writeI32(_iter12.getKey());
            oprot.writeString(_iter12.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BookDtoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BookDtoTupleScheme getScheme() {
      return new BookDtoTupleScheme();
    }
  }

  private static class BookDtoTupleScheme extends org.apache.thrift.scheme.TupleScheme<BookDto> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BookDto struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.title);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetAuthors()) {
        optionals.set(0);
      }
      if (struct.isSetType()) {
        optionals.set(1);
      }
      if (struct.isSetPublishers()) {
        optionals.set(2);
      }
      if (struct.isSetReviews()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetAuthors()) {
        {
          oprot.writeI32(struct.authors.size());
          for (java.lang.String _iter13 : struct.authors)
          {
            oprot.writeString(_iter13);
          }
        }
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetPublishers()) {
        {
          oprot.writeI32(struct.publishers.size());
          for (Publisher _iter14 : struct.publishers)
          {
            _iter14.write(oprot);
          }
        }
      }
      if (struct.isSetReviews()) {
        {
          oprot.writeI32(struct.reviews.size());
          for (java.util.Map.Entry<java.lang.Integer, java.lang.String> _iter15 : struct.reviews.entrySet())
          {
            oprot.writeI32(_iter15.getKey());
            oprot.writeString(_iter15.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BookDto struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.title = iprot.readString();
      struct.setTitleIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list16 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.authors = new java.util.ArrayList<java.lang.String>(_list16.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem17;
          for (int _i18 = 0; _i18 < _list16.size; ++_i18)
          {
            _elem17 = iprot.readString();
            struct.authors.add(_elem17);
          }
        }
        struct.setAuthorsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.type = io.github.heldev.verso.app.Type.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list19 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.publishers = new java.util.ArrayList<Publisher>(_list19.size);
          @org.apache.thrift.annotation.Nullable Publisher _elem20;
          for (int _i21 = 0; _i21 < _list19.size; ++_i21)
          {
            _elem20 = new Publisher();
            _elem20.read(iprot);
            struct.publishers.add(_elem20);
          }
        }
        struct.setPublishersIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TMap _map22 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.reviews = new java.util.HashMap<java.lang.Integer,java.lang.String>(2*_map22.size);
          int _key23;
          @org.apache.thrift.annotation.Nullable java.lang.String _val24;
          for (int _i25 = 0; _i25 < _map22.size; ++_i25)
          {
            _key23 = iprot.readI32();
            _val24 = iprot.readString();
            struct.reviews.put(_key23, _val24);
          }
        }
        struct.setReviewsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

